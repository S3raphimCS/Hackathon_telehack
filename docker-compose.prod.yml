version: '3.8'

services:
  django: 
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: django_web
    command: sh -c "python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./backend/SPO_KROT:/api 
    ports: 
      - '8000:8000'
    env_file: 
      - .env  
    depends_on:
      - pgdb
      - redis
    networks:  
      - backend_net

  pgdb:
    image: postgres
    container_name: pgdb
    restart: always
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports: 
      - '5432:5432'
    env_file: 
      - .env
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 6s
      retries: 3
    networks:  
      - backend_net
  
  react-app:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: react_app
    volumes:
      - ./frontend:/frontend
    ports:
    - "3000:3000"
    networks:
      - backend_net
  
    
  # Nginx
  proxy:
    build:
      context: ./backend/docker/proxy
      dockerfile: Dockerfile
    container_name: nginx
    restart: always
    ports:
      - 80:80
      - 443:443
    volumes:
      - certbot-web:/vol/www
      - proxy-dhparams:/vol/proxy
      - certbot-certs:/etc/letsencrypt
    env_file:
      - .env
    depends_on:
      - django
      - react-app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"] 
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    logging:         
      driver: "json-file"
      options:
        max-size: "10m"   
        max-file: "3"
    networks:  
      - backend_net    

  # Certbot
  certbot:
    build:
      context: ./backend/docker/certbot
      dockerfile: Dockerfile
    container_name: certbot
    command: echo "Skipping..."
    volumes:
      - certbot-web:/vol/www
      - certbot-certs:/etc/letsencrypt/
    env_file:
      - .env
    depends_on:
      - proxy
  

volumes:
  pgdata:
  certbot-web:
  proxy-dhparams:
  certbot-certs:

networks:
  backend_net:
    driver: bridge
  